os: linux
dist: bionic

# Install python3 and utilities dependencies
addons:
  apt:
    packages:
      - "python3"
      - "python3-pip"

language: go
go:
- 1.15.2
go_import_path: github.com/operator-framework/operator-sdk

# Python 3.6 is the default Python when language: python.
# But when not language: python, Python 3 can not be used by default.
# There is pip (/usr/bin/pip), but not pip3.
# Because of it the global env is required.
env:
  global:
    - PATH=/opt/python/3.6.7/bin:${PATH}:/tmp/operator-sdk/bin
    # Set deploy stage's IMAGE_TAG_SUFFIXES to release tags if running on a release, otherwise the branch name.
    - DEPLOY_IMAGE_TAG_SUFFIXES="$(test -n "$TRAVIS_TAG" && echo "latest $TRAVIS_TAG" || echo "$TRAVIS_BRANCH")"

cache:
  directories:
    - $(go env GOCACHE)
    - $(go env GOPATH)/pkg/mod

branches:
  except:
    - release-4.2
    - release-4.3

# The `x_base_steps` top-level key is unknown to travis,
# so we can use it to create a bunch of common build step
# YAML anchors which we use in our build jobs.
x_base_steps:
  # Base go, ansbile, and helm job
  - &test
    before_install:
      # hack/ci/check-doc-only-update.sh needs to be sourced so
      # that it can properly exit the test early with success
      - source hack/ci/check-doc-only-update.sh
      - travis_retry make tidy
      - git fetch origin --unshallow --tags
    install:
      # The latest version of docker-ce contains the buildx plugin, a requirement for multi-arch builds.
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      - sudo apt-get update
      - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
      - make install
      - make setup-k8s
      - export KUBECONFIG="$(kind get kubeconfig-path --name="kind")"
      # buildx requires certain images be pre-pulled (bug)
      # See https://github.com/moby/buildkit/issues/1271
      - docker pull golang:1.15.2 golang:1.15.2-alpine
    after_failure:
      - kubectl get all --all-namespaces
      - kubectl get events --all-namespaces --field-selector=type=Warning

  # Base deploy job
  - &deploy
    env:
      - IMAGE_REPO=quay.io/estroz
    before_install:
      # hack/ci/check-doc-only-update.sh needs to be sourced so
      # that it can properly exit the test early with success
      - source hack/ci/check-doc-only-update.sh
      - git fetch origin --unshallow --tags
    install:
      # The latest version of docker-ce contains the buildx plugin, a requirement for multi-arch builds.
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      - sudo apt-get update
      - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
      - set -u; echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin quay.io; set +u

stages:
  - check
  - test
  - name: deploy
    if: tag IS present OR branch = master OR branch =~ /^v[0-9]+\.[0-9]+\.x$/ OR commit_message =~ /\[travis deploy\]/
    # if: type != pull_request AND ( tag IS present OR branch = master OR branch =~ /^v[0-9]+\.[0-9]+\.x$/ OR commit_message =~ /\[travis deploy\]/ )
  - name: release
    if: type != pull_request AND tag IS present

jobs:
  include:

    ## Project check stage jobs ##

    # Run the sanity tests
    - stage: check
      name: Sanity Tests
      before_install:
        - git fetch origin --unshallow --tags
      script:
        - make test-sanity

    # Run website checks
    - name: Doc Checks
      script:
        - make test-links

    ## Operator test stage jobs ##

    # Build and test ansible and test ansible using molecule
    - stage: test
      name: Ansible on Kubernetes
      <<: *test
      before_script:
        - pip3 install --upgrade setuptools pip
        - pip install --user ansible~=2.9.13
      script:
        - make test-e2e-ansible
        - make test-e2e-ansible-molecule

    # Test subcommands
    - name: Subcommands and Integration on Kubernetes
      <<: *test
      script:
      - make test-subcommand
      - make test-integration

    # Build and test go
    - name: Go on Kubernetes
      <<: *test
      before_script:
      - (cd / && go get github.com/mattn/goveralls)
      script:
      - make test-unit
      - make test-e2e-go
      after_success:
      - $GOPATH/bin/goveralls -service=travis-ci -coverprofile=coverage.out -repotoken=$COVERALLS_TOKEN

    # Build and test helm
    - <<: *test
      name: Helm on Kubernetes
      script: make test-e2e-helm

    ## Image deploy/push stage jobs ##
    - stage: deploy
      name: deploy operator-sdk
      <<: *deploy
      script: make -f release/Makefile image/operator-sdk IMAGE_REPO="$IMAGE_REPO" IMAGE_TAG_SUFFIXES="$(test -n "$TRAVIS_TAG" && echo "latest $TRAVIS_TAG" || echo "$TRAVIS_BRANCH")"

    - name: deploy ansible-operator
      <<: *deploy
      script: make -f release/Makefile image/ansible-operator IMAGE_REPO="$IMAGE_REPO" IMAGE_TAG_SUFFIXES="$(test -n "$TRAVIS_TAG" && echo "latest $TRAVIS_TAG" || echo "$TRAVIS_BRANCH")"

    - name: deploy helm-operator
      <<: *deploy
      script: make -f release/Makefile image/helm-operator IMAGE_REPO="$IMAGE_REPO" IMAGE_TAG_SUFFIXES="$(test -n "$TRAVIS_TAG" && echo "latest $TRAVIS_TAG" || echo "$TRAVIS_BRANCH")"

    - name: deploy scorecard-test
      <<: *deploy
      script: make -f release/Makefile image/scorecard-test IMAGE_REPO="$IMAGE_REPO" IMAGE_TAG_SUFFIXES="$(test -n "$TRAVIS_TAG" && echo "latest $TRAVIS_TAG" || echo "$TRAVIS_BRANCH")"

    - name: deploy scorecard-test-kuttl
      <<: *deploy
      script: make -f release/Makefile image/scorecard-test-kuttl IMAGE_REPO="$IMAGE_REPO" IMAGE_TAG_SUFFIXES="$(test -n "$TRAVIS_TAG" && echo "latest $TRAVIS_TAG" || echo "$TRAVIS_BRANCH")"

    ## Release jobs ##
    - stage: release
      name: publish release
      before_install: git fetch origin --unshallow --tags
      script: make -f release/Makefile release TAG="$TRAVIS_TAG"
